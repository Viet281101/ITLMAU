

Chapitre 4: References et const



- Si A est un type  on peut définir une références sur A : (A & ref = ...)
c'est une "sorte" de pointeur constant.

Exemple:
int main (){
    int a = 1;
    int &ref = a;
    ref = 2;
    // a == 2 et ref == 2;
}




- 'const' : Une reference doit etre initialisée des sa création.

Autre Exemple:

void f(int p){
    p = 1;
}

void g(int& a){
    q = 2;
}

int main(){
    int var = 0;
    f(var);
    // ici var == 0
    g(var);
    // ici var == 2
}




Une fonction peut également renvoyer une réferences.

Exemple:

class A {
    int a;
    public: 
        int& accesseur(){
            return this -> a;
        }
};

int main(){
    int var;
    A obj;
    obj.accesseur() = 3;
    var = obj.accesseur();
}


Const : Pour une classe A on peut définir des objets constant, mais seules les méthodes 
déclarées "const" peuvent etre appellées sur un objet constant.

Exemple:

struct A {
    int a;
    void methodeNC(){};
    void methodeC(){};
}

int main() {
    A obj2;
    A const obj; // const A obj fonction aussi
    obj.methodeNC(); // erreur à la compilation
                    // car methodeNC n'est pas déclarer 'const'
    obj.methodeC(); // ok car methodeC est déclarer const
    obj2.methodeC(); //ok
    obj2.methodeNC(); //ok
}


Cette règle ne s'applique ni au constructeur ni au destructeur
Une méthode déclarée const ne peut pas modifier un attribute de 
la classe excepté un attribute de la classe excapté si cellui-ci est déclaré mutable.

Exemple :

struct A {
    int a;
    mutable int b;

int get(void) const { 
    return this -> a; // ok
}

void setb(int p) const {
    this -> a = p; // (pas d'erreur)
}
};



Rappel (de C)

int * p1;
const int * p2;
int * const p3 = ...;
const int * const p4 = ...;

p3 = &...; // erreur p3 est constant
p4 = &...; // erreur p4 est constant
*p3 = ...; // ok
*p4 = ...; // erreur
p1 = ...; // ok
p2 = ...; // ok
*p1 = ...; // ok
*p2 = ...; // erreur



Si A est un type (non const) alors existe une 

Par contre dans l'autre sers il n'y a pas de 

Exemple:
const int a = 4;
int & ref = a; // erreur
const int & ref2 = 0; // ok
ref2 = 1; // erreur
a = 2; // erreur
----------------------------------------------------------------
int b;
int & ref = b; // ok




Constructeur: par copie:
Dans toute classe il existe un constructeur par copie

Exemple:
struct A{};

int main(){
    A.obj; // appel de constructeur sans parametre.
    A obj2 = obj; // appel de constructeur par copie
                    // ce n'est pas une 
}


Pour toute classe A il existe par défaut un constructeur de copie 
on peut le r en définisation un constructeur A (const A & ref){...} ou A(A & ref){...}

Autre Exemple:
struct A {
    A(void) {
        cout<< "je suis A()" << endl;
    }
    A(const A & ref){
        cout<< "je suis A()" << endl;
    }
}

void f(A p){};

int main(){
    A ob; // appel de A()
    f(ob); // appel de 
}




